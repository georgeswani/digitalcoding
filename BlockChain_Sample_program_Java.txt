Javascript Blockchain Example Code

To create a blockchain using Javascript, let’s go through the basics.

Each block in a chain of blocks has a hash of a previous block. In the event of an attack or malicious behavior, the hash is significantly changed, which affects the whole blockchain, freezing it and therefore eliminating the chance of changing the block.

To create a block, consider the details it contains:

1. Create a Block. Blockchain code example:

const SHA256 = require("crypto-js/sha256");

class Block

{

constructor(index, timestamp, data, previousHash = '')

{

this.index = index;

this.previousHash = previousHash;

this.timestamp = timestamp;

this.data = data;

this.hash = this.calculateHash();

}

calculateHash()

{

return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data)).toString();

}

}



Code Analysis:

Include Crypto-Js Library.
Declare The Constructor That Will Be Called During Instantiation Of The Class. The Goal Of A Constructor Is To Initialize Class Instance.
Hash All The Content To Receive The Block Hash.
Use The JSON.Stringify Function To Format Block Data.


2. Create a blockchain:

Create a genesis block, the first block that invokes immediately on the blockchain.


createGenesisBlock()
 
{
 
return new Block(0, “01/01/2018”, “Genesis block”, “0”);
 
}



Add other blocks. In order to connect blocks, use this function:


getLatestBlock()
 
{
 
return this.chain[this.chain.length - 1];
 
}
addBlock(newBlock) {
 
newBlock.previousHash = this.getLatestBlock().hash;
 
newBlock.hash = newBlock.calculateHash();
 
this.chain.push(newBlock);
 
}

Make sure that values of the previous and current blocks should match, in order for n the new block to be considered valid.

Validate the chain, checking everything for stability and eliminating vulnerabilities.


for (let i = 1; i &lt; this.chain.length; i++)
 
{
 
const currentBlock = this.chain[i];
 
const previousBlock = this.chain[i - 1];
 
if (currentBlock.hash !== currentBlock.calculateHash()) {
 
return false;
 
}
 
if (currentBlock.previousHash !== previousBlock.hash)
 
{
 
return false;
 
}
 
}
 
return true;
 
}